import streamlit as st
import json
from pathlib import Path
import base64
from urllib.parse import quote_plus
import textwrap

st.set_page_config(page_title="Portfolio - Nguy·ªÖn Th√†nh Vinh", layout="wide")

DATA_FILE = Path(__file__).parent / "projects.json"
if DATA_FILE.exists():
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        projects = json.load(f)
else:
    projects = []

# ---------- Utility helpers ----------

def set_page(page: str, **params):
    """
    C·∫≠p nh·∫≠t st.query_params h·ª£p l·ªá ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng (simulate multipage).
    G√°n st.query_params = dict v·ªõi values l√† list-of-strings.
    Kh√¥ng g·ªçi st.rerun() ·ªü ƒë√¢y (tr√°nh c·∫£nh b√°o 'calling rerun in callback is a no-op').
    Streamlit s·∫Ω t·ª± rerun khi query params thay ƒë·ªïi.
    """
    # X√¢y dict m·ªõi (value l√† list of strings)
    q = {}
    q["page"] = [str(page)]
    for k, v in params.items():
        if v is None:
            continue
        if isinstance(v, (list, tuple)):
            q[k] = [str(x) for x in v]
        else:
            q[k] = [str(v)]

    # G√°n query params (Streamlit s·∫Ω c·∫≠p nh·∫≠t URL v√† rerun script t·ª± ƒë·ªông)
    st.query_params = q
    # Kh√¥ng g·ªçi st.rerun() ·ªü ƒë√¢y ƒë·ªÉ tr√°nh warning 'Calling st.rerun() within a callback is a no-op.'

def get_query():
    # Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng query params (dict-like)
    return st.query_params


def download_link_bytes(content_bytes: bytes, filename: str, label: str):
    b64 = base64.b64encode(content_bytes).decode()
    href = f"data:application/octet-stream;base64,{b64}"
    st.markdown(f"[{label}]({href})")


def render_project_card(p):
    st.image(p["thumbnail"], width=320)
    st.subheader(p["title"])
    st.write(p["short_desc"])
    cols = st.columns([1, 1, 1])
    with cols[0]:
        if st.button("Xem chi ti·∫øt", key=f"view_{p['id']}"):
            # tr·ª±c ti·∫øp set query params (chuy·ªÉn page)
            set_page("project", id=p["id"])
    with cols[1]:
        if st.button("GitHub", key=f"gh_{p['id']}"):
            st.write(f"Open: {p.get('notebook_github','-')}")
    with cols[2]:
        if st.button("T·∫£i b√°o c√°o", key=f"rep_{p['id']}"):
            st.info("B√°o c√°o ch∆∞a c√≥. B·∫°n c√≥ th·ªÉ upload file pdf v√† ch·ªânh link report_pdf trong projects list.")


# ---------- Top navigation (simple) ----------
query = get_query()
# L·∫•y page (n·∫øu kh√¥ng c√≥ -> "home")
page = query.get("page", ["home"])[0]

with st.sidebar:
    st.title("Menu")
    # Khi d√πng as on_click callback, truy·ªÅn kwargs {"page":"home"} ‚Äî set_page s·∫Ω thay query params v√† Streamlit s·∫Ω rerun
    st.button("Home", on_click=set_page, kwargs={"page": "home"})
    st.button("About", on_click=set_page, kwargs={"page": "about"})
    st.button("Projects", on_click=set_page, kwargs={"page": "projects"})
    st.button("Resume", on_click=set_page, kwargs={"page": "resume"})
    st.button("Contact", on_click=set_page, kwargs={"page": "contact"})
    st.markdown("---")
    st.write("üîé T√¨m nhanh")
    q = st.text_input("T√¨m ki·∫øm projects", value=query.get('q', [''])[0])
    if st.button("T√¨m", key="search_btn"):
        set_page("projects", q=q)

# ---------- PAGES ----------
if page == "home":
    st.header("Hello ‚Äî My name is Nguyen Thanh Vinh")
    st.subheader("Data Analyst / Analytics Engineering")
    st.write("M√¨nh x√¢y d·ª±ng c√°c pipeline OCR, m√¥ h√¨nh ML, v√† dashboards. D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë project ti√™u bi·ªÉu ‚Äî l∆∞·ªõt nhanh v√† b·∫•m v√†o ƒë·ªÉ xem chi ti·∫øt.")
    st.image("https://picsum.photos/seed/profile/1000/400")
    st.markdown("---")
    st.subheader("How to browse")
    st.write("1) V√†o Projects ƒë·ªÉ l∆∞·ªõt nhanh. 2) B·∫•m 'Xem chi ti·∫øt' ƒë·ªÉ m·ªü trang project ri√™ng. 3) T·∫£i CV ·ªü tab Resume.")

elif page == "about":
    st.header("About ‚Äî Th√¥ng tin c√° nh√¢n")
    st.markdown("**Background h·ªçc t·∫≠p:** C·ª≠ nh√¢n Khoa h·ªçc m√°y t√≠nh ...")
    st.markdown("**K·ªπ nƒÉng:** Python, SQL, Machine Learning, BI (Power BI/Looker Studio).")
    st.markdown("**M·ª•c ti√™u ngh·ªÅ nghi·ªáp:** Tr·ªü th√†nh Data Scientist chuy√™n s√¢u v·ªÅ gi·∫£i ph√°p computer vision v√† analytics cho ng√†nh b√°n l·∫ª.")
    st.markdown("---")
    st.subheader("Tips for portfolio")
    st.write("- 3-5 project ch·∫•t l∆∞·ª£ng > 10 project s∆° s√†i.\n- Storytelling: Dataset -> Tools -> Process -> Result.\n- Th√™m h√¨nh ·∫£nh dashboard, chart, screenshot code.")

elif page == "projects":
    st.header("Projects")
    q = query.get('q', [''])[0]
    tag_filter = query.get('tag', [''])[0]

    # Quick filter UI
    cols = st.columns([3, 1])
    with cols[0]:
        search_box = st.text_input("T√¨m trong projects", value=q, key="projects_search")
    with cols[1]:
        all_tags = sorted({t for p in projects for t in p.get('tools', [])})
        tag_choice = st.selectbox("L·ªçc tag", options=[""] + all_tags, index=0)

    # Render quick cards
    st.write("L∆∞·ªõt nhanh c√°c project ‚Äî click 'Xem chi ti·∫øt' ƒë·ªÉ m·ªü trang ri√™ng")
    for p in projects:
        # simple text match filter
        txt = (p.get('title','') + ' ' + p.get('short_desc','') + ' ' + p.get('long_desc','')).lower()
        if search_box and search_box.lower() not in txt:
            continue
        if tag_choice and tag_choice not in p.get('tools', []):
            continue
        with st.container():
            cols = st.columns([1, 2])
            with cols[0]:
                st.image(p['thumbnail'], width=220)
            with cols[1]:
                st.subheader(p['title'])
                st.write(p['short_desc'])
                # badges
                st.markdown(' '.join([f'`{t}`' for t in p.get('tools', [])]))
                if st.button("Xem chi ti·∫øt", key=f"detail_{p['id']}"):
                    set_page("project", id=p['id'])
        st.divider()

elif page == "project":
    # Show single project detail page
    pid = query.get('id', [None])[0]
    p = next((x for x in projects if x['id'] == pid), None)
    if not p:
        st.error("Project kh√¥ng t√¨m th·∫•y. Vui l√≤ng quay l·∫°i Projects.")
    else:
        st.header(p['title'])
        st.write(p['long_desc'])
        st.markdown("**T√≥m t·∫Øt nhanh**")
        st.write(f"- Dataset: {p.get('dataset','-')}")
        st.write(f"- Tools: {', '.join(p.get('tools',[]))}")
        st.write(f"- Quy tr√¨nh: {p.get('process','-')}")
        st.write(f"- K·∫øt qu·∫£ ch√≠nh: {p.get('results','-')}")

        st.markdown("---")
        # images / dashboards
        st.subheader("·∫¢nh / Dashboard")
        for img in p.get('image_assets', []):
            st.image(img, use_column_width=True)

        st.markdown("---")
        # Code example (show only)
        st.subheader("ƒêo·∫°n code minh h·ªça (ch·ªâ hi·ªÉn th·ªã)")
        example = """
# Example: load model and predict (pseudo)
from PIL import Image
import clip
import torch

model, preprocess = clip.load('ViT-B/32')
img = preprocess(Image.open('sample.jpg')).unsqueeze(0)
text = clip.tokenize(['sarcasm','not sarcasm'])
with torch.no_grad():
    image_features = model.encode_image(img)
    text_features = model.encode_text(text)
    # cos sim -> predict
"""
        st.code(textwrap.dedent(example), language='python')

        st.markdown("---")
        # Links
        st.subheader("T√†i nguy√™n & Download")
        if p.get('notebook_github'):
            col1, col2, col3 = st.columns(3)
            with col1:
                if st.button("M·ªü Notebook (GitHub)", key="nb_{}".format(p["id"])):
                    st.write(p.get('notebook_github'))
            with col2:
                if p.get('code_example_raw') and st.button("Xem code (raw)", key=f"raw_{p['id']}"):
                    st.write(p.get('code_example_raw'))
            with col3:
                if p.get('report_pdf') and st.button("T·∫£i b√°o c√°o PDF", key=f"repdown_{p['id']}"):
                    st.write("Report link: ", p.get('report_pdf'))

        st.markdown("---")
        if st.button("Quay v·ªÅ Projects"):
            set_page('projects')

elif page == "resume":
    st.header("Resume / CV")
    st.write("B·∫°n c√≥ th·ªÉ t·∫£i CV ·ªü ƒë√¢y")
    # fake CV bytes (replace with open file)
    dummy = b"PDF_BYTES_REPLACE_WITH_YOUR_CV"
    download_link_bytes(dummy, "CV_Nguyen_Thanh_Vinh.pdf", "üì• T·∫£i CV (thay b·∫±ng file th·∫≠t)")

elif page == "contact":
    st.header("Contact")
    st.write("G·ª≠i tin nh·∫Øn cho m√¨nh ‚Äî m√¨nh s·∫Ω tr·∫£ l·ªùi qua email.")
    with st.form('contact_form'):
        name = st.text_input('T√™n')
        email = st.text_input('Email')
        msg = st.text_area('Tin nh·∫Øn')
        submit = st.form_submit_button('G·ª≠i')
        if submit:
            if not email or not msg:
                st.warning('Vui l√≤ng nh·∫≠p email v√† tin nh·∫Øn')
            else:
                mailto = f"mailto:vinh@example.com?subject=Portfolio%20Contact%20from%20{quote_plus(name or 'Visitor')}&body={quote_plus(msg)}"
                st.markdown(f"G·ª≠i email b·∫±ng c√°ch b·∫•m ƒë√¢y: [{mailto}]({mailto})")

else:
    st.write("Trang kh√¥ng x√°c ƒë·ªãnh ‚Äî quay v·ªÅ Home")
    set_page('home')

# ---------- Footer ----------
st.markdown("---")
st.write("¬© 2025 Nguy·ªÖn Th√†nh Vinh ‚Äî Portfolio")

# End of file
